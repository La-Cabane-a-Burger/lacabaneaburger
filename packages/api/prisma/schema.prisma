generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  MANAGER
  ADMIN
}

enum Allergen {
  GLUTEN
  PEANUTS
  SOY
  SHELLFISH
  EGGS
  MILK
  NUTS
  SESAME
  WHEAT
  CORN
  SULFUR
  LUPIN
  MUSHROOMS
  CELERY
  MUSTARD
  LAC
  TURKEY
  PORK
  CHICKEN
  FISH
}

enum Category {
    BURGER
    SALAD
    NUGGETS
    APPETIZER
    DESSERT
    SIDE
    BEVERAGE
}

model User {
  id            String   @id @default(uuid())
  createdAt     DateTime @default(now())
  email         String   @unique
  password      String
  role          Role     @default(USER)
  phone         String
  reward_points Int      @default(0)
  orders        Order[]
}

model Store {
  id          String    @id @default(uuid())
  city        String
  slug        String    @unique
  phone       String
  postal_code Int
  address     String
  latitude    Decimal
  longitude   Decimal
  openings    Opening[]
  orders      Order[]
}

model Opening {
  id      String  @id @default(uuid())
  weekday String
  start   String
  end     String
  store   Store?  @relation(fields: [storeId], references: [id])
  storeId String?
}

model Order {
  id         String      @id @default(uuid())
  price      Float
  date       DateTime
  store      Store?      @relation(fields: [storeId], references: [id])
  storeId    String?
  user       User?       @relation(fields: [userId], references: [id])
  userId     String?
  orderItems OrderItem[]
}

model OrderItem {
  id           String        @id @default(uuid())
  order        Order         @relation(fields: [orderId], references: [id])
  orderId      String
  item         Item          @relation(fields: [itemId], references: [id])
  itemId       String
  orderRecipes OrderRecipe[]
  menu         Menu?         @relation(fields: [menuId], references: [id])
  menuId       String?
}

model OrderRecipe {
  orderItem    OrderItem  @relation(fields: [orderItemId], references: [id])
  orderItemId  String
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId String

  @@id([orderItemId, ingredientId])
}

model Menu {
  id          String      @id @default(uuid())
  name        String      @unique
  price       Float
  category    String
  description String
  menuItems   Item[]
  orderMenus  OrderItem[]
  menuItem    MenuItem[]
}

model MenuItem {
  menu     Menu    @relation(fields: [menuId], references: [id])
  menuId   String
  item     Item    @relation(fields: [itemId], references: [id])
  itemId   String
  pickable Boolean @default(false)

  @@id([menuId, itemId])
}

model Item {
  id          String      @id @default(uuid())
  name        String      @unique
  price       Float
  category    Category
  description String
  ingredients Recipe[]
  menuItems   Item[]      @relation("ItemToItem")
  orderItems  OrderItem[]
  menu        Menu?       @relation(fields: [menuId], references: [id])
  menuId      String?
  menuItem    MenuItem[]
  item        Item?       @relation("ItemToItem", fields: [itemId], references: [id])
  itemId      String?
}

model Ingredient {
  id           String        @id @default(uuid())
  name         String        @unique
  price        Float         @default(0.0)
  category     String
  item         Recipe[]
  orderRecipes OrderRecipe[]
  allergens    Allergen[]
}

model Recipe {
  item         Item       @relation(fields: [itemId], references: [id])
  itemId       String
  ingredient   Ingredient @relation(fields: [ingredientId], references: [id])
  ingredientId String
  pickable     Boolean    @default(false)
  number       Int        @default(1)
  quantity     Float      @default(0)
  energy       Float      @default(0)

  @@id([itemId, ingredientId])
}
